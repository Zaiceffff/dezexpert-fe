import { getApiUrl } from './config';

export interface ServicePrices {
  oneRoomLiquid: number;
  oneRoomGel: number;
  twoRoomLiquid: number;
  twoRoomGel: number;
  threeRoomLiquid: number;
  threeRoomGel: number;
  fourRoomLiquid: number;
  fourRoomGel: number;
  homeRoomLiquid: number;
  homeRoomGel: number;
  plotRoomLiquid: number;
  plotRoomGel: number;
  restaurantRoomLiquid: number;
  restaurantRoomGel: number;
}

export interface PricingApiResponse {
  success: boolean;
  data?: ServicePrices;
  error?: string;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserPrices = async (token: string): Promise<ServicePrices | null> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ localStorage
    const cachedPrices = localStorage.getItem('user_prices');
    if (cachedPrices) {
      try {
        const parsed = JSON.parse(cachedPrices);
        console.log('üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã:', parsed);
        return parsed;
      } catch (e) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞');
        localStorage.removeItem('user_prices');
      }
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ /user/service
    console.log('üì° –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ /user/service...');
    const serviceResponse = await fetch(getApiUrl('/user/service'), {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    if (serviceResponse.ok) {
      const serviceData = await serviceResponse.json();
      console.log('‚úÖ –¶–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ /user/service:', serviceData);
      
      // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
      localStorage.setItem('user_prices', JSON.stringify(serviceData));
      return serviceData as ServicePrices;
    } else {
      console.log('‚ö†Ô∏è /user/service –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º /user/profile');
      
      // Fallback: –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å
      const profileResponse = await fetch(getApiUrl('/user/profile'), {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç /user/profile:', profileResponse.status, profileResponse.ok);

      if (profileResponse.ok) {
        const profileData = await profileResponse.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:', profileData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        if (profileData.service && typeof profileData.service === 'object') {
          // –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã
          localStorage.setItem('user_prices', JSON.stringify(profileData.service));
          console.log('‚úÖ –¶–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã:', profileData.service);
          return profileData.service;
        } else {
          console.log('‚ö†Ô∏è –¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          const defaultPrices = getDefaultPrices();
          localStorage.setItem('user_prices', JSON.stringify(defaultPrices));
          return defaultPrices;
        }
      } else {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', profileResponse.status);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (cachedPrices) {
          try {
            return JSON.parse(cachedPrices);
          } catch (e) {
            console.warn('‚ö†Ô∏è –ö—ç—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
          }
        }
        return null;
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:', error);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const cachedPrices = localStorage.getItem('user_prices');
    if (cachedPrices) {
      try {
        return JSON.parse(cachedPrices);
      } catch (e) {
        console.warn('‚ö†Ô∏è –ö—ç—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—è');
      }
    }
    return null;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const updateUserPrices = async (
  token: string, 
  userId: string, 
  prices: ServicePrices
): Promise<PricingApiResponse> => {
  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω:', { userId, prices });
    
    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint
    const response = await fetch(getApiUrl(`/user/${userId}/service`), {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(prices),
    });

    console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç /user/${userId}/service:', response.status, response.ok);

    if (response.ok) {
      // –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ localStorage
      localStorage.setItem('user_prices', JSON.stringify(prices));
      console.log('‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ /user/${userId}/service');
      return { success: true, data: prices };
    } else {
      console.log('‚ö†Ô∏è Fallback –∫ /user/service');
      // Fallback: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π endpoint
      const fallbackResponse = await fetch(getApiUrl('/user/service'), {
        method: 'PATCH',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(prices),
      });

      console.log('üì° –û—Ç–≤–µ—Ç –æ—Ç /user/service:', fallbackResponse.status, fallbackResponse.ok);

      if (fallbackResponse.ok) {
        // –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ localStorage
        localStorage.setItem('user_prices', JSON.stringify(prices));
        console.log('‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ /user/service');
        return { success: true, data: prices };
      } else {
        const errorText = await fallbackResponse.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω:', fallbackResponse.status, errorText);
        return { 
          success: false, 
          error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: ${fallbackResponse.status} - ${errorText}` 
        };
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω:', error);
    return { 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É' 
    };
  }
};

// –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ü–µ–Ω
export const getDefaultPrices = (): ServicePrices => ({
  oneRoomLiquid: 1500,
  oneRoomGel: 1200,
  twoRoomLiquid: 2000,
  twoRoomGel: 1700,
  threeRoomLiquid: 2500,
  threeRoomGel: 2200,
  fourRoomLiquid: 3000,
  fourRoomGel: 2700,
  homeRoomLiquid: 3500,
  homeRoomGel: 3200,
  plotRoomLiquid: 4000,
  plotRoomGel: 3700,
  restaurantRoomLiquid: 5000,
  restaurantRoomGel: 4700,
});

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω
export const validatePrices = (prices: ServicePrices): boolean => {
  return Object.values(prices).every(price => typeof price === 'number' && price >= 0);
};

// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Ü–µ–Ω
export const clearPricesCache = (): void => {
  localStorage.removeItem('user_prices');
  console.log('üóëÔ∏è –ö—ç—à —Ü–µ–Ω –æ—á–∏—â–µ–Ω');
};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à)
export const forceRefreshPrices = async (token: string): Promise<ServicePrices | null> => {
  console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞...');
  clearPricesCache();
  return getUserPrices(token);
};
