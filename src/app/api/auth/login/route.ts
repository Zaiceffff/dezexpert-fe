import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { apiClient, logApiCall, logApiError } from '@/lib/apiUtils';
import { API_CONFIG } from '@/lib/config';

interface LoginRequest {
  email: string;
  password: string;
}

interface LoginResponse {
  success: boolean;
  token?: string;
  user?: unknown;
  message: string;
}

export async function POST(request: NextRequest): Promise<NextResponse<LoginResponse>> {
  try {
    const body: LoginRequest = await request.json();
    
    logApiCall('POST', '/api/auth/login', { email: body.email });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!body.email || !body.password) {
      return NextResponse.json(
        { 
          success: false,
          message: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        },
        { status: 400 }
      );
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
    const externalApiUrl = `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.AUTH.LOGIN}`;
    
    console.log('üîç DEBUG: API_CONFIG.BASE_URL =', API_CONFIG.BASE_URL);
    console.log('üîç DEBUG: API_CONFIG.ENDPOINTS.AUTH.LOGIN =', API_CONFIG.ENDPOINTS.AUTH.LOGIN);
    console.log('üîç DEBUG: externalApiUrl =', externalApiUrl);
    
    logApiCall('POST', externalApiUrl, { email: body.email });
    
    const result = await apiClient.post(externalApiUrl, body);
    
    logApiCall('POST', externalApiUrl, 'Success');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      token: (result as any)?.token || (result as any)?.accessToken,
      user: (result as any)?.user,
      message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
    });
    
  } catch (error: unknown) {
    logApiError('POST', '/api/auth/login', error);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API –∫–ª–∏–µ–Ω—Ç–∞
    if (error && typeof error === 'object' && 'status' in error) {
      const apiError = error as { status: number; message: string };
      
      let message = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      if (apiError.status === 401) {
        message = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
      } else if (apiError.status === 404) {
        message = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
      }
      
      return NextResponse.json(
        { 
          success: false,
          message
        },
        { status: apiError.status }
      );
    }
    
    // –û–±—â–∏–µ –æ—à–∏–±–∫–∏
    return NextResponse.json(
      { 
        success: false,
        message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
      },
      { status: 500 }
    );
  }
}
