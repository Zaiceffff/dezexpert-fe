#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function fixComponentImports(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
    if (content.includes('<Input') && !content.includes('import { Input }')) {
      content = content.replace(
        'import { Button } from \'@/components/ui/button\';',
        'import { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';'
      );
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Input –≤ ${filePath}`);
    }
    
    if (content.includes('<Textarea') && !content.includes('import { Textarea }')) {
      content = content.replace(
        'import { Button } from \'@/components/ui/button\';',
        'import { Button } from \'@/components/ui/button\';\nimport { Textarea } from \'@/components/ui/textarea\';'
      );
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Textarea –≤ ${filePath}`);
    }
    
    if (content.includes('<LoadingSpinner') && !content.includes('import { LoadingSpinner }')) {
      content = content.replace(
        'import { Button } from \'@/components/ui/button\';',
        'import { Button } from \'@/components/ui/button\';\nimport { LoadingSpinner } from \'@/components/ui/loading-spinner\';'
      );
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç LoadingSpinner –≤ ${filePath}`);
    }
    
    if (content.includes('<ButtonLoader') && !content.includes('import { ButtonLoader }')) {
      content = content.replace(
        'import { Button } from \'@/components/ui/button\';',
        'import { Button } from \'@/components/ui/button\';\nimport { ButtonLoader } from \'@/components/ui/loading-spinner\';'
      );
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ButtonLoader –≤ ${filePath}`);
    }
    
    if (content.includes('<BarChart3') && !content.includes('import { BarChart3 }')) {
      content = content.replace(
        'import { TrendingUp, Users, DollarSign, MapPin, Download } from \'lucide-react\';',
        'import { TrendingUp, Users, DollarSign, MapPin, Download, BarChart3 } from \'lucide-react\';'
      );
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç BarChart3 –≤ ${filePath}`);
    }
    
    if (content.includes('<Settings') && !content.includes('import { Settings }')) {
      content = content.replace(
        'import { TrendingUp, Users, DollarSign, MapPin, Download } from \'lucide-react\';',
        'import { TrendingUp, Users, DollarSign, MapPin, Download, Settings } from \'lucide-react\';'
      );
      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Settings –≤ ${filePath}`);
    }
    
    fs.writeFileSync(filePath, content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function fixUnusedVariablesAdvanced(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const unusedVars = [
      'copied',
      'translateService',
      'fetchOrdersWithPagination'
    ];
    
    unusedVars.forEach(varName => {
      // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const patterns = [
        new RegExp(`const\\s+${varName}\\s*=\\s*[^;]+;?\\s*`, 'g'),
        new RegExp(`let\\s+${varName}\\s*=\\s*[^;]+;?\\s*`, 'g'),
        new RegExp(`var\\s+${varName}\\s*=\\s*[^;]+;?\\s*`, 'g')
      ];
      
      patterns.forEach(pattern => {
        if (content.match(pattern)) {
          content = content.replace(pattern, '');
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –≤ ${filePath}`);
        }
      });
    });
    
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    fs.writeFileSync(filePath, content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º...\n');
  
  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const filesToFix = [
    'src/app/app/(protected)/leads/page.tsx',
    'src/app/app/(protected)/page.tsx',
    'src/app/app/(protected)/settings/page.tsx',
    'src/app/app/auth/page.tsx',
    'src/app/register/page.tsx',
    'src/components/AddRequestModal.tsx',
    'src/components/Analytics.tsx',
    'src/components/DashboardPricingManager.tsx',
    'src/components/LeadsList.tsx',
    'src/components/OrderDetails.tsx',
    'src/components/OrdersManagement.tsx',
    'src/components/PriceEditModal.tsx',
    'src/components/PricingManager.tsx',
    'src/app/app/(protected)/dashboard/page.tsx'
  ];
  
  filesToFix.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${filePath}...`);
      fixComponentImports(filePath);
      fixUnusedVariablesAdvanced(filePath);
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
  });
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ "npm run lint" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
}

main();
