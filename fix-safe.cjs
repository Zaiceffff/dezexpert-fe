#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
function fixUnusedImportsSafe(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ lucide-react
    const unusedLucideImports = [
      'Heart',
      'BarChart3', 
      'Calendar',
      'Settings',
      'Lock',
      'Award',
      'MessageCircle'
    ];
    
    unusedLucideImports.forEach(iconName => {
      // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç —Å —ç—Ç–∏–º –∏–∫–æ–Ω–∫–æ–π
      const importPattern = new RegExp(`import\\s*\\{[^}]*\\b${iconName}\\b[^}]*\\}\\s*from\\s*['"]lucide-react['"];?`, 'g');
      
      if (content.match(importPattern)) {
        // –£–¥–∞–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ –∏–º–ø–æ—Ä—Ç–∞, –æ—Å—Ç–∞–≤–ª—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        content = content.replace(importPattern, (match) => {
          // –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
          let newImport = match.replace(new RegExp(`\\b${iconName}\\b\\s*,?\\s*`), '');
          newImport = newImport.replace(/,\s*,/g, ','); // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ
          newImport = newImport.replace(/,\s*}/g, '}'); // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ }
          newImport = newImport.replace(/{\s*,/g, '{'); // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –ø–æ—Å–ª–µ {
          newImport = newImport.replace(/{\s*}/g, '{}'); // –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
          
          // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —Å—Ç–∞–ª –ø—É—Å—Ç—ã–º, —É–¥–∞–ª—è–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É
          if (newImport.match(/import\s*\{\s*\}\s*from/)) {
            return '';
          }
          
          return newImport;
        });
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ ${iconName} –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –≤ ${filePath}`);
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const unusedComponentImports = [
      'import { useEffect } from \'react\';',
      'import { useMemo } from \'react\';',
      'import { Link } from \'next/link\';',
      'import { useRouter } from \'next/navigation\';',
      'import { toast } from \'sonner\';'
    ];
    
    unusedComponentImports.forEach(importStr => {
      if (content.includes(importStr)) {
        content = content.replace(importStr, '');
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç –≤ ${filePath}`);
      }
    });
    
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    fs.writeFileSync(filePath, content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
function fixUnusedVariablesSafe(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    const unusedVars = [
      'copied',
      'registrationData',
      'prices',
      'router',
      'Order',
      'confirmPassword',
      'ChartData',
      'userProfile',
      'getCurrentWeek',
      'handleLogout',
      'validatePrices',
      'isLoading',
      'ButtonLoader',
      'LoadingSpinner',
      'useMemo',
      'ChevronLeft',
      'ChevronRight',
      'ChevronsLeft',
      'ChevronsRight',
      'getOrderById',
      'setMessage',
      'isSaving',
      'formatPrice',
      'showTextOnMobile',
      'showLabelOnMobile',
      'get',
      'event',
      'data'
    ];
    
    unusedVars.forEach(varName => {
      // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
      const patterns = [
        new RegExp(`const\\s+${varName}\\s*=\\s*[^;]+;?\\s*`, 'g'),
        new RegExp(`let\\s+${varName}\\s*=\\s*[^;]+;?\\s*`, 'g')
      ];
      
      patterns.forEach(pattern => {
        if (content.match(pattern)) {
          content = content.replace(pattern, '');
          console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${varName} –≤ ${filePath}`);
        }
      });
    });
    
    // –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = content.replace(/\n\s*\n\s*\n/g, '\n\n');
    
    fs.writeFileSync(filePath, content);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:`, error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ù–∞—á–∏–Ω–∞—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...\n');
  
  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const filesToFix = [
    'src/app/(marketing)/page.tsx',
    'src/app/[linkId]/page.tsx',
    'src/app/app/(protected)/leads/page.tsx',
    'src/app/app/(protected)/page.tsx',
    'src/app/app/(protected)/settings/page.tsx',
    'src/app/app/auth/page.tsx',
    'src/app/offer/page.tsx',
    'src/app/policy/page.tsx',
    'src/app/register/page.tsx',
    'src/components/Analytics.tsx',
    'src/components/DashboardPricingManager.tsx',
    'src/components/Footer.tsx',
    'src/components/Header.tsx',
    'src/components/LeadsList.tsx',
    'src/components/OrderDetails.tsx',
    'src/components/OrdersManagement.tsx',
    'src/components/PriceEditModal.tsx',
    'src/components/PriceManager.tsx',
    'src/components/PricingManager.tsx',
    'src/components/ui/button.tsx',
    'src/components/ui/input.tsx',
    'src/hooks/useAuth.tsx',
    'src/hooks/useBilling.ts',
    'src/hooks/useOrders.ts',
    'src/hooks/usePartners.ts',
    'src/hooks/useSms.ts',
    'src/hooks/useUsers.ts',
    'src/lib/analytics.ts',
    'src/lib/api.ts',
    'src/lib/apiUtils.ts',
    'src/lib/events.ts',
    'src/lib/logger.ts',
    'src/lib/pricingApi.ts',
    'src/lib/repo.ts',
    'src/tests/unit/pricing.test.ts'
  ];
  
  filesToFix.forEach(filePath => {
    if (fs.existsSync(filePath)) {
      console.log(`üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${filePath}...`);
      fixUnusedImportsSafe(filePath);
      fixUnusedVariablesSafe(filePath);
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }
  });
  
  console.log('\n‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ "npm run lint" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
}

main();
